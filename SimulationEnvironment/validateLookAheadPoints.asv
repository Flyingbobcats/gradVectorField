%==========================================================================
% validateLookAheadPoints.m
%
%
%==========================================================================

clc
clear
close all


dt = 0.001;
ts = 0;
tf = 1;

T = ts:dt:tf;

uav = UAV();
vf = vectorField();
vf = vf.navf('circ');
vf.avf{1}.r = 5;
vf.avf{1}.H = 1;


dt = 0.1;

t = 4.5;          %Lookahead time


r = 11;
x = -r;
y = 5;
v = 10;


uav = uav.setup(x,y,v,0,dt);

figure
vf.pltff

 for i =1:length(T)
     
     [U,V] = vf.heading(uav.x,uav.y);
     heading = atan2(V,U);
     
     uav = uav.update_pos(heading);
     
     X = (uav.v*sin(t*uav.turnrate)/uav.turnrate);
     Y = (uav.v/uav.turnrate)*(1-cos(t*uav.turnrate));
%      
%      %Calculate env
%      x1c = uav.x+X*cos(uav.heading)-X*sin(uav.heading);
%      y1c = uav.y+Y*cos(uav.heading)+Y*sin(uav.heading);
%      
%      x2c = uav.x+X*cos(uav.heading)-X*sin(uav.heading);
%      y2c = uav.y-Y*cos(uav.heading)+Y*sin(uav.heading);

    
%     alpha = atan2(Y,X);
%     Q = sqrt(X^2+Y^2);
%     P = [cos(uav.heading),-sin(uav.heading),0;sin(uav.heading),cos(uav.heading),0;0,0,1];
%     q = [Q*cos(alpha);Q*sin(alpha);0];
%     V = P*q;
%     
%     alpha = atan2(Y,X);
%     Q = sqrt(X^2+Y^2);
%     P = [cos(uav.heading),-sin(uav.heading),0;sin(uav.heading),cos(uav.heading),0;0,0,1];
%     q = [Q*cos(alpha);-Q*sin(alpha);0];
%     V2 = P*q;


    turnrates = -0.35:0.01:0.35;
    for i=1:length(turnrates)
        P   = [uav.x;uav.y;0];
        x_b = (uav.v*sin(t*turnrates(i))/turnrates(i));         %ICx in the body frame
        y_b = (uav.v/turnrates(i))*(1-cos(t*turnrates(i)));     %ICy in the body frame
        q   = sqrt(x_b^2+y_b^2);                                %Length of xb,yb
        phi = atan2(y_b,x_b);
        q_b = [q*cos(phi);q*sin(phi);0];
        
        R0_b = [cos(uav.heading)     -sin(uav.heading)      0;
            sin(uav.heading)      cos(uav.heading)      0;
            0                           0               1];
        
        
        Q0_1 = P + R0_b*q_b;
        xs(i) = 
    end
    
     
     
     
    hold on
    uav.pltUAV();
    plot(uav.x,uav.y,'r*');
    plot(Q0_1(1),Q0_1(2),'k*');
     plot(Q0_2(1),Q0_2(2),'k*');
    axis equal
     

     
     drawnow()
     clf
     
     
     
 end
 
 
 
 
 
 
 










